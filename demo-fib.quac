NOP         @ In this script, I implemented a way to calculate fibonacci numbers. 
SETH R2, 1  @ This script should create an array of fibonacci numbers starting from mem[0x0100].
MOVL R1, 20 @ R2 is used as a pointer to an array stored starting from mem[0x0100]. 
NOP         @ R1 will hold the number of fibonacci numbers to calculate. 
NOP         @ The resulting largest fibonacci number should be loaded into R4 at the end. 
SETC 1      @ We will use negative conditions to make comparisons.
CALL 20     @ Calls the generateFibs function
LDR R4, [R2, -1]
MOVL PC, 33 @ Terminates the program. 
NOP                 @func nextFib:          //Assumes that mem[R2, -1] and mem[R2, -2] stores the previous fib numbers, calculates mem[R2]
LDR R3, [R2, -1]    @   R3 := mem[R2-1]     
LDR R4, [R2, -2]    @   R4 := mem[R2-2]
ADD R4, R4, R3      @   R4 := R4 + R3
STR R4, [R2]        @   mem[R2] <- R4 
RET                 @   return 
NOP
NOP
NOP
NOP
NOP                 @func generateFibs      //Generates the fibonacci numbers. 
STR R0, [R2], 1     @   mem[0] := 0 
SUB R1, 1           @   R1 := R1 - 1
RETz                @   if R1 < 0 then return
MOVL R3, 1
STR R3, [R2], 1     @   mem[1] := 1
SUB R1, 1           @   R1 := R1 - 1
RETz                @   if R1 < 0 then return
MOVL R3, 10         @   while R1 < 0:
CALL R3             @       nextFib
ADD R2, 1           @       R2 := R2 + 1
MOVL PC, 25         @       R1 := R1 - 1
NOP                 @   return
NOP 
NOP                 @ THE RESULT OF THIS SCRIPT SHOULD BE R4 := 6765, clock counter should be atleast 226 before the result is computed.